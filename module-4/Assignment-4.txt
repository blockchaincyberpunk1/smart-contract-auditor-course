Smart Contract Hardening

Objective: The objective of this assignment is to challenge students to harden a vulnerable smart contract using automated analysis tools. Students will be provided with a vulnerable smart contract containing documented issues, such as integer overflow vulnerabilities. They will use analysis tools like Slither or MythX to identify these vulnerabilities. Subsequently, students will modify the contract to address the identified issues, thereby enhancing its security. This assignment aims to reinforce students' understanding of smart contract vulnerabilities and their ability to use automated tools for security improvements.

Instructions:

Introduction to Smart Contract Vulnerabilities:

Provide students with an overview of common smart contract vulnerabilities, including integer overflow/underflow, reentrancy, and unchecked sends.
Explain the importance of identifying and addressing these vulnerabilities to improve contract security.
Sample Vulnerable Smart Contract:

Offer students a sample smart contract that contains documented vulnerabilities, with a focus on integer overflow.
Ensure that the provided contract includes detailed comments or descriptions of the vulnerabilities.
Use of Automated Analysis Tools:

Instruct students to choose an automated analysis tool such as Slither or MythX to analyze the vulnerable smart contract.
Explain the process of setting up and using the chosen tool for vulnerability detection.
Vulnerability Identification:

Task students with running the chosen analysis tool on the vulnerable contract to identify and document the specific vulnerabilities.
Encourage them to explore the analysis reports generated by the tool for detailed information.
Contract Hardening:

Guide students in modifying the vulnerable contract to address the identified vulnerabilities.
Ensure that students make effective code changes to mitigate the vulnerabilities, emphasizing best practices for each issue.
Security Verification:

Instruct students to test the modified contract to verify that the vulnerabilities have been successfully mitigated.
Require students to document the testing process and confirm that the contract is now secure.
Grading Criteria:

Use of Automated Tools: Evaluate the student's ability to choose and effectively use an automated analysis tool.
Vulnerability Identification: Assess the accuracy and completeness of vulnerability identification.
Quality of Hardening: Review the quality of code modifications made to address vulnerabilities.
Security Verification: Evaluate the successful verification of security improvements.